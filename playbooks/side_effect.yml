---

# (c) Wong Hoi Sing Edison <hswong3i@pantarei-design.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- hosts: all
  remote_user: root
  become: true
  tasks:
    - name: systemctl stop kubelet.service
      ansible.builtin.service:
        name: "{{ item.name }}"
        state: "stopped"
        enabled: false
      loop:
        - { name: "kubelet.service" }
        - { name: "etcd.service" }
      changed_when: false
      failed_when: false

    - name: crictl rm --all --force
      ansible.builtin.shell: |
        set -euxo pipefail
        crictl rm --all --force
        umount --all --force --type fuse.fuse-overlayfs || echo $?
        umount --all --force --type tmpfs || echo $?
      args:
        executable: "/bin/bash"
      changed_when: false
      failed_when: false

    - name: rm -rf /etc/kubernetes/*
      ansible.builtin.shell: |
        set -euxo pipefail
        rm -rf /etc/etcd/*
        rm -rf /etc/kubernetes/*
        rm -rf /var/lib/etcd/*
        rm -rf /var/lib/kubelet/*
      args:
        executable: "/bin/bash"
      changed_when: false
      failed_when: false

    - name: prepare directories
      ansible.builtin.file:
        dest: "{{ item.dest }}"
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
        mode: "{{ item.mode | default('0755') }}"
        state: "{{ item.state | default('directory') }}"
      loop:
        - { dest: "/etc/ansible" }
        - { dest: "/etc/ansible/group_vars/all" }
        - { dest: "/etc/ansible/playbooks" }
        - { dest: "/etc/ansible/roles" }

    - name: rsync directories
      synchronize:
        dest: "{{ item.dest }}"
        src: "{{ item.src }}"
        archive: true
        delete: true
        owner: false
        group: false
      loop:
        - { dest: "/etc/ansible", src: "../inventory/default/" }
        - { dest: "/etc/ansible/playbooks", src: "../playbooks/" }
        - { dest: "/etc/ansible/roles", src: "../roles/" }

    - name: copy templates
      ansible.builtin.template:
        dest: "{{ item.dest }}"
        src: "{{ item.src | default('./templates' + item.dest + '.j2') }}"
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
        mode: "{{ item.mode | default('0644') }}"
      loop:
        - { dest: "/etc/ansible/group_vars/all/99-packer.yml" }

    - name: prepare files
      ansible.builtin.file:
        dest: "{{ item.dest }}"
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
        mode: "{{ item.mode | default('0644') }}"
        state: "{{ item.state | default('file') }}"
      loop:
        - { dest: "/etc/ansible/group_vars/all/99-packer.yml" }

    - name: debian | apt-get dist-upgrade
      ansible.builtin.raw: |
        set -eu
        apt-get update
        DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -y
      changed_when: false
      failed_when: false

    - name: redhat | yum update
      ansible.builtin.raw: |
        set -eu
        yum makecache
        yum update -y
      changed_when: false
      failed_when: false

    - name: suse | zypper update
      ansible.builtin.raw: |
        set -eu
        zypper -n --gpg-auto-import-keys refresh
        zypper -n update -y
      changed_when: false
      failed_when: false

    - name: reboot
      ansible.builtin.reboot:
        connect_timeout: 1800
        reboot_timeout: 1800
        pre_reboot_delay: 60
        post_reboot_delay: 60
        test_command: bash -c "whoami"
      loop: "{{ ansible_play_hosts }}"
      delegate_to: "{{ item }}"
      run_once: true
