---

# (c) Wong Hoi Sing Edison <hswong3i@pantarei-design.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- hosts: all
  remote_user: root
  become: true
  tasks:
    - name: include default variables
      include_vars: "./vars/main.yml"

    - name: include release specific variables
      include_vars: "{{ _loop_var }}"
      loop: "{{ query('first_found', _params) }}"
      loop_control:
        loop_var: _loop_var
      vars:
        _params:
          files:
            - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
            - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
            - "{{ ansible_distribution | lower }}.yml"
            - "{{ ansible_os_family | lower }}-{{ ansible_distribution_version | lower }}.yml"
            - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
            - "{{ ansible_os_family | lower }}.yml"
          paths:
            - "./vars"
          skip: true

    - name: include release specific tasks
      include_tasks: "{{ _loop_var }}"
      loop: "{{ query('first_found', _params) }}"
      loop_control:
        loop_var: _loop_var
      vars:
        _params:
          files:
            - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
            - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
            - "{{ ansible_distribution | lower }}.yml"
            - "{{ ansible_os_family | lower }}-{{ ansible_distribution_version | lower }}.yml"
            - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
            - "{{ ansible_os_family | lower }}.yml"
          paths:
            - "./tasks"
          skip: true

    - name: include default tasks
      include_tasks: "./tasks/main.yml"

    - name: include role
      include_role:
        name: python

    - name: include role
      include_role:
        name: ansible

    - name: include role
      include_role:
        name: locales

    - name: include role
      include_role:
        name: timezone

    - name: include role
      include_role:
        name: kernel

    - name: include role
      include_role:
        name: cloud_init

    - name: include role
      include_role:
        name: sshd

    - name: rm -rf /etc/ssh/ssh_host_*
      raw: |
        set -eu
        rm -rf /etc/ssh/ssh_host_*
      changed_when: false
      failed_when: false

    - name: group by
      group_by:
        key: "{{ item.key }}"
      loop:
        - { key: "etcd" }
        - { key: "kube_master" }

    - name: add host
      add_host:
        hostname: "{{ item.hostname }}"
        groups: "{{ item.groups }}"
      loop:
        - { hostname: "{{ inventory_hostname }}", groups: "etcd" }
        - { hostname: "{{ inventory_hostname }}", groups: "kube_master" }

    - name: include role
      include_role:
        name: cri_tools

    - name: include role
      include_role:
        name: containernetworking_plugins

    - name: include role
      include_role:
        name: containers_common

    - name: include role
      include_role:
        name: crun

    - name: include role
      include_role:
        name: conmon

    - name: include role
      include_role:
        name: cri_o

    - name: include role
      include_role:
        name: kubectl

    - name: include role
      include_role:
        name: kubeadm

    - name: include role
      include_role:
        name: kubelet

    - name: include role
      include_role:
        name: etcd

    - name: prepare directories
      file:
        dest: "{{ item.dest }}"
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
        mode: "{{ item.mode | default('0755') }}"
        state: "{{ item.state | default('directory') }}"
      loop:
        - { dest: "/etc/kubernetes/pki" }
        - { dest: "/etc/kubernetes/pki/etcd" }
      when: inventory_hostname == groups['etcd'][0]

    - name: "generate {{ kubernetes_etcd.external.keyFile }}"
      environment:
        PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      vars:
        ansible_python_interpreter: "python3"
      openssl_privatekey:
        path: "{{ kubernetes_etcd.external.keyFile }}"
      when: inventory_hostname == groups['etcd'][0]

    - name: "generate {{ kubernetes_etcd.external.keyFile | splitext | first }}.csr"
      environment:
        PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      vars:
        ansible_python_interpreter: "python3"
      openssl_csr:
        path: "{{ kubernetes_etcd.external.keyFile | splitext | first }}.csr"
        privatekey_path: "{{ kubernetes_etcd.external.keyFile }}"
        common_name: "{{ kube_apiserver_csr_common_name }}"
        subject:
          CN: "{{ kube_apiserver_csr_common_name }}"
        subject_alt_name: "{{ kube_apiserver_csr_subject_alt_name }}"
        key_usage:
          - digitalSignature
          - keyEncipherment
          - nonRepudiation
        extended_key_usage:
          - clientAuth
          - serverAuth
        basic_constraints: "CA:FALSE"
      when: inventory_hostname == groups['etcd'][0]

    - name: "generate {{ kubernetes_etcd.external.certFile }}"
      environment:
        PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      vars:
        ansible_python_interpreter: "python3"
      openssl_certificate:
        path: "{{ kubernetes_etcd.external.certFile }}"
        csr_path: "{{ kubernetes_etcd.external.keyFile | splitext | first }}.csr"
        privatekey_path: "{{ kubernetes_etcd.external.keyFile }}"
        ownca_path: "{{ etcd_trusted_ca_file }}"
        ownca_privatekey_path: "{{ etcd_trusted_ca_file | splitext | first }}.key"
        provider: "ownca"
      when: inventory_hostname == groups['etcd'][0]

    - name: "copy {{ kubernetes_etcd.external.caFile }}"
      copy:
        dest: "{{ item.dest }}"
        src: "{{ item.src }}"
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
        mode: "{{ item.mode | default('0644') }}"
        remote_src: true
        force: false
      loop:
        - { dest: "{{ kubernetes_etcd.external.caFile }}", src: "{{ etcd_trusted_ca_file }}" }
      when: inventory_hostname == groups['etcd'][0]

    - name: prepare files
      file:
        dest: "{{ item.dest }}"
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
        mode: "{{ item.mode | default('0644') }}"
        state: "{{ item.state | default('file') }}"
      loop:
        - { dest: "{{ kubernetes_etcd.external.caFile }}" }
        - { dest: "{{ kubernetes_etcd.external.certFile }}" }
        - { dest: "{{ kubernetes_etcd.external.keyFile }}", mode: "0600" }
      when: inventory_hostname == groups['etcd'][0]

    - name: include role
      include_role:
        name: kube_master

    - name: systemctl stop kubelet.service
      service:
        name: "{{ item.name }}"
        state: "stopped"
        enabled: false
      loop:
        - { name: "kubelet.service" }
        - { name: "etcd.service" }
      changed_when: false
      failed_when: false

    - name: crictl rm --all --force
      shell: |
        set -euxo pipefail
        crictl rm --all --force
        umount --all --force --type fuse.fuse-overlayfs || echo $?
        umount --all --force --type tmpfs || echo $?
      args:
        executable: "/bin/bash"
      changed_when: false
      failed_when: false

    - name: rm -rf /etc/kubernetes/*
      shell: |
        set -euxo pipefail
        rm -rf /etc/etcd/*
        rm -rf /etc/kubernetes/*
        rm -rf /root/.kube
        rm -rf /var/lib/etcd/*
        rm -rf /var/lib/kubelet/*
      args:
        executable: "/bin/bash"
      changed_when: false
      failed_when: false
